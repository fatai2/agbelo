import React, { useState, useEffect } from 'react';
import { 
	InputGroup, 
	InputGroupAddon, 
	InputGroupText, 
	Input, 
	ListGroup, 
	ListGroupItem, 
	Button, 
	Modal, 
	ModalHeader, 
	ModalBody, 
	ModalFooter, 
	Label,
	Form,
	FormGroup  } from 'reactstrap';

import { Formik } from 'formik';
import { DataStore, Predicates } from "@aws-amplify/datastore";
import {   User,
  Post,
  Translation,
  TranslationVote,
  VoteType } from "./models";

type Props = {
  id: string;
  postContent: string;
  author: string;
  translation: Array<{
    id: string;
    translationIvie: string;
    exampleIvie: string;
    exampleEnglish: string;
    authorId: string;
    voteCount: number;
  }>;
};

function onCreatePost() {
  DataStore.save(
    new Post({
      title: `New title ${Date.now()}`,
      rating: (function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
      })(1, 7),
      status: PostStatus.ACTIVE
    })
  );
}

async function onQueryPost(setPosts) {
  const posts = await DataStore.query(Post, c => c.rating("gt", 4));
  setPosts(posts)
}

async function listPosts(setPosts) {
  const posts = await DataStore.query(Post, Predicates.ALL);
  setPosts(posts);
}


const useDebounce = (value: any, delay: number) => {
  const [debounceValue, setDebounceValue] = useState(value);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebounceValue(value);
    }, delay);

    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);

  return debounceValue;
};

export const Feed = (props: Props) => {
	
	const [posts, setPosts] = useState([]);

	  useEffect( () => {
		
		listPosts(setPosts);

		const subscription = DataStore.observe(Post).subscribe(msg => {
		  console.log(msg.model, msg.opType, msg.element);
		  listPosts(setPosts);
		});

		const handleConnectionChange = () => {
		  const condition = navigator.onLine ? 'online' : 'offline';
		  console.log(condition);
		  if (condition === 'online') { listPosts(setPosts); }
		}
		
		window.addEventListener('online', handleConnectionChange);
		window.addEventListener('offline', handleConnectionChange);
		   
		return () => subscription.unsubscribe();
	  }, []);
  const theme = useTheme();

  const data3 = twitts.map(twittProps => ({
    ...twittProps,
    onPress: () =>
      props.navigation &&
      props.navigation.push( 'Details', {
        ...twittProps,
      }),
  }))
  
  const data = Object.values(data3)
    .map(datum => ({
      ...datum,
      lowerCaseName: datum.postContent.toLowerCase(),
    }))
    .sort((a, b) => a.postContent > b.postContent);
    
  const [query, setQuery] = useState('');
  const debounceQuery = useDebounce(query, 200);
  const [filteredData, setFilteredData] = useState(data);

  useEffect(() => {
    const lowerCaseQuery = debounceQuery.toLowerCase();
    const newData = data
      .filter((datum) => datum.lowerCaseName.includes(lowerCaseQuery))
      .map((datum) => ({
        ...datum,
        rank: datum.lowerCaseName.indexOf(lowerCaseQuery),
      }))
      .sort((a, b) => a.rank - b.rank);

    setFilteredData(newData);
  }, [debounceQuery]);
  
  return (
    <div>
		<InputGroup>
			<Input 
				placeholder="Search..." 
				onChangeText={setQuery}
				value={query}
			/>
			<InputGroupAddon addonType="append">
				<InputGroupText>üîç</InputGroupText>
			</InputGroupAddon>
		</InputGroup>
		<ListGroup flush>
		{
			filteredData.map((item, index) =>(
				<ListGroupItem key={item.id} tag="button" action onClick={() => {}} >
					{item.postContent}
				</ListGroupItem>
			))
		}
		</ListGroup>
    </div>
  );
};
